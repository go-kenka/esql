// Code generated by esql, DO NOT EDIT.
package role

import (
	"context"
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

type RoleQuery struct {
	*esql.Selector
	db   *sqlx.DB
	with map[string]struct{}
}

func (q *RoleQuery) First(ctx context.Context) (*RoleData, error) {
	query, args := q.Limit(1).Query()
	var data RoleData
	err := q.db.GetContext(ctx, &data, query, args...)
	if err != nil {
		return nil, err
	}

	err = q.queryWith(ctx, []*RoleData{&data})
	if err != nil {
		return nil, err
	}

	return &data, nil
}

func (q *RoleQuery) FirstID(ctx context.Context) (int, error) {
	query, args := q.Select(ColumnId).Limit(1).Query()
	var id int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&id)
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (q *RoleQuery) IDs(ctx context.Context) ([]int, error) {
	query, args := q.Select(ColumnId).Limit(1).Query()
	rows, err := q.db.QueryxContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var data []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, err
		}
		data = append(data, id)
	}

	return data, nil
}

func (q *RoleQuery) ScanX(ctx context.Context, dist any) error {
	query, args := q.Query()
	err := q.db.SelectContext(ctx, &dist, query, args...)
	if err != nil {
		return err
	}

	return nil
}

func (q *RoleQuery) AllX(ctx context.Context) ([]*RoleData, error) {
	query, args := q.Query()
	var data []*RoleData
	err := q.db.SelectContext(ctx, &data, query, args...)
	if err != nil {
		return nil, err
	}

	err = q.queryWith(ctx, data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (q *RoleQuery) CountX(ctx context.Context) (int, error) {
	query, args := q.Count(ColumnId).Query()
	var count int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&count)
	if err != nil {
		return 0, err
	}

	return count, nil
}

func (q *RoleQuery) ExistX(ctx context.Context) (bool, error) {
	query, args := q.Count(ColumnId).Query()
	var count int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&count)
	if err != nil {
		return false, err
	}

	return count > 0, nil
}

func (q *RoleQuery) WithUserList() *RoleQuery {
	q.with["user"] = struct{}{}
	return q
}

func (q *RoleQuery) UserQuery() *esql.Selector {
	var cols []string
	cols = append(cols, edgeUserTable.C(EdgeUserRefField))
	cols = append(cols, edgeUserTable.C(EdgeUserDisplayNikeName))

	return esql.NewBuilder(q.db.DriverName()).Select(cols...).From(edgeUserTable)
}

func (q *RoleQuery) queryWith(ctx context.Context, data []*RoleData) error {
	if _, ok := q.with["user"]; ok {
		var ids []int
		for _, datum := range data {
			ids = append(ids, datum.Id)
		}

		query, args := q.UserQuery().Where(esql.InInts(EdgeUserRefField, ids...)).OrderBy(esql.Desc(EdgeUserRefField)).Query()
		var userData []*RoleEdgeUserData
		err := q.db.SelectContext(ctx, &userData, query, args...)
		if err != nil {
			return err
		}

		userMap := make(map[int][]*RoleEdgeUserData)

		var withData []*RoleEdgeUserData
		var lastId int
		for i, a := range userData {
			if i == 0 {
				withData = append(withData, a)
				lastId = a.RoleId
				continue
			}

			if a.RoleId == lastId {
				withData = append(withData, a)
				continue
			}

			// 下一条
			{
				// 添加数据到map中
				userMap[lastId] = append(userMap[lastId], withData...)
				// 更新lastId
				lastId = a.RoleId
				// 清空data，并传入当前值
				withData = nil
				withData = append(withData, a)
			}
		}

		for _, d := range data {
			d.UserList = userMap[d.Id]
		}
	}

	return nil
}
