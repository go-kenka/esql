// Code generated by esql, DO NOT EDIT.
package role

import (
	"context"
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

type RoleUpdate struct {
	builder *esql.UpdateBuilder
	db      *sqlx.DB
	data    *RoleData
}

func (u *RoleUpdate) Set(column string, v any) *RoleUpdate {
	u.builder.Set(column, v)
	return u
}
func (u *RoleUpdate) SetNull(column string) *RoleUpdate {
	u.builder.SetNull(column)
	return u
}
func (u *RoleUpdate) Add(column string, v any) *RoleUpdate {
	u.builder.Add(column, v)
	return u
}

func (u *RoleUpdate) Where(p *esql.Predicate) *RoleUpdate {
	u.builder.Where(p)
	return u
}

func (u *RoleUpdate) Save(ctx context.Context) ([]*RoleData, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *RoleUpdate) sqlSave(ctx context.Context) ([]*RoleData, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data []*RoleData

	err = stmt.SelectContext(ctx, data, args...)
	if err != nil {
		return nil, err
	}
	return data, nil
}

type RoleUpdateOne struct {
	builder *esql.UpdateBuilder
	db      *sqlx.DB
	data    *RoleData
}

func (u *RoleUpdateOne) Set(column string, v any) *RoleUpdateOne {
	u.builder.Set(column, v)
	return u
}
func (u *RoleUpdateOne) SetNull(column string) *RoleUpdateOne {
	u.builder.SetNull(column)
	return u
}
func (u *RoleUpdateOne) Add(column string, v any) *RoleUpdateOne {
	u.builder.Add(column, v)
	return u
}

func (u *RoleUpdateOne) Save(ctx context.Context) (*RoleData, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *RoleUpdateOne) sqlSave(ctx context.Context) (*RoleData, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data RoleData

	err = stmt.SelectContext(ctx, &data, args...)
	if err != nil {
		return nil, err
	}
	return &data, nil
}
