// Code generated by esql, DO NOT EDIT.
package user

import (
	"context"
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

type UserCreate struct {
	builder  *esql.InsertBuilder
	selector *esql.Selector
	db       *sqlx.DB
	data     *UserData
}

func (c *UserCreate) Set(column string, v any) *UserCreate {
	c.builder.Set(column, v)
	return c
}

func (c *UserCreate) Save(ctx context.Context) (*UserData, error) {
	id, err := c.sqlSave(ctx)
	if err != nil {
		return nil, err
	}
	return c.get(ctx, id)
}

func (c *UserCreate) sqlSave(ctx context.Context) (int, error) {
	query, args := c.builder.Query()
	result, err := c.db.ExecContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}

	id, _ := result.LastInsertId()
	return int(id), nil
}

func (c *UserCreate) sql() (string, []any) {
	return c.builder.Query()
}

func (c *UserCreate) get(ctx context.Context, id int) (*UserData, error) {
	query, args := c.selector.Where(esql.EQ(ColumnId, id)).Query()
	var data UserData

	err := c.db.GetContext(ctx, &data, query, args...)
	if err != nil {
		return nil, err
	}

	return &data, nil
}

type UserCreateBulk struct {
	db       *sqlx.DB
	selector *esql.Selector
	data     []*UserCreate
}

func (cb UserCreateBulk) Save(ctx context.Context) ([]*UserData, error) {
	ids, err := cb.sqlSave(ctx)
	if err != nil {
		return nil, err
	}
	return cb.find(ctx, ids)
}
func (cb UserCreateBulk) sqlSave(ctx context.Context) ([]any, error) {
	var ids []any
	var stmt *sqlx.Stmt
	var err error
	for i, d := range cb.data {
		query, args := d.sql()
		if i == 0 {
			stmt, err = cb.db.Preparex(query)
			if err != nil {
				return nil, err
			}
		}
		if stmt != nil {
			result, err := stmt.ExecContext(ctx, args...)
			if err != nil {
				return nil, err
			}
			id, _ := result.LastInsertId()
			ids = append(ids, id)
		}
	}
	return ids, nil
}

func (cb UserCreateBulk) find(ctx context.Context, ids []any) ([]*UserData, error) {
	query, args := cb.selector.Where(esql.In(ColumnId, ids...)).Query()
	var data []*UserData
	err := cb.db.SelectContext(ctx, data, query, args...)
	if err != nil {
		return nil, err
	}
	return data, nil
}
