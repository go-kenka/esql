// Code generated by esql, DO NOT EDIT.
package role

import (
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

const (
	TableName    = "role"
	ColumnId = "id"
	ColumnRoleName = "role_name"// EdgeUserTableName 角色与用户关系（1对n）
    EdgeUserTableName   = "user"
    EdgeUserLinkField   = "id"
    EdgeUserRefField    = "role_id"
    EdgeUserDisplayNikeName = "nike_name"
)

var (
	roleTable        = esql.Table(TableName).As("t1")
    edgeUserTable      = esql.Table(EdgeUserTableName).As("t2")
)

var Columns = []string{
	ColumnId,
	ColumnRoleName,
}

type RoleClient struct {
	direct string
	db     *sqlx.DB
}

type RoleData struct {
    *RoleEdgeUserData
    Id int `db:"id"` // 角色ID
    RoleName string `db:"role_name"` // 角色名称
}

func (d *RoleData) HasUser() bool {
	return d.RoleEdgeUserData != nil
}

type RoleEdgeUserData struct {
	NikeName string `db:"nike_name"` // 
}



func NewRoleClient(db *sqlx.DB) *RoleClient {
	return &RoleClient{
		direct: db.DriverName(),
		db:     db,
	}
}

func (c *RoleClient) Query() *RoleQuery {
	var cols []string
	for _, column := range Columns {
		cols = append(cols, roleTable.C(column))
	}
	return &RoleQuery{
		Selector: esql.NewBuilder(c.direct).Select(cols...).From(roleTable),
		db:       c.db,
	}
}

func (c *RoleClient) Create() *RoleCreate {
	return &RoleCreate{
		builder: esql.NewBuilder(c.direct).Insert(TableName),
		db:      c.db,
		data:    &RoleData{},
	}
}

func (c *RoleClient) CreateBulk(data ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{
		db:   c.db,
		data: data,
	}
}

func (c *RoleClient) Update() *RoleUpdate {
	return &RoleUpdate{
		builder: esql.NewBuilder(c.direct).Update(TableName),
		db:      c.db,
		data:    &RoleData{},
	}
}

func (c *RoleClient) UpdateOne(id int) *RoleUpdateOne {
	return &RoleUpdateOne{
		builder: esql.NewBuilder(c.direct).Update(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
		data:    &RoleData{},
	}
}

func (c *RoleClient) Delete() *RoleDelete {
	return &RoleDelete{
		builder: esql.NewBuilder(c.direct).Delete(TableName),
		db:      c.db,
	}
}

func (c *RoleClient) DeleteOne(id int) *RoleDeleteOne {
	return &RoleDeleteOne{
		builder: esql.NewBuilder(c.direct).Delete(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
	}
}
