// Code generated by esql, DO NOT EDIT.
package role

import (
	"context"
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

type RoleQuery struct {
	*esql.Selector
	db *sqlx.DB
}

func (q *RoleQuery) First(ctx context.Context) (*RoleData, error) {
	query, args := q.Limit(1).Query()
	var data RoleData
	err := q.db.GetContext(ctx, &data, query, args...)
	if err != nil {
		return nil, err
	}

	return &data, nil
}

func (q *RoleQuery) FirstID(ctx context.Context) (int, error) {
	query, args := q.Select(ColumnId).Limit(1).Query()
	var id int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&id)
	if err != nil {
		return 0, err
	}

	return id, nil
}

func (q *RoleQuery) IDs(ctx context.Context) ([]int, error) {
	query, args := q.Select(ColumnId).Limit(1).Query()
	rows, err := q.db.QueryxContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var data []int
	for rows.Next() {
		var id int
		err := rows.Scan(&id)
		if err != nil {
			return nil, err
		}
		data = append(data, id)
	}

	return data, nil
}

func (q *RoleQuery) ScanX(ctx context.Context, dist any) error {
	query, args := q.Query()
	err := q.db.SelectContext(ctx, &dist, query, args...)
	if err != nil {
		return err
	}

	return nil
}

func (q *RoleQuery) AllX(ctx context.Context) ([]*RoleData, error) {
	query, args := q.Query()
	var data []*RoleData
	err := q.db.SelectContext(ctx, &data, query, args...)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (q *RoleQuery) CountX(ctx context.Context) (int, error) {
	query, args := q.Count(ColumnId).Query()
	var count int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&count)
	if err != nil {
		return 0, err
	}

	return count, nil
}

func (q *RoleQuery) ExistX(ctx context.Context) (bool, error) {
	query, args := q.Count(ColumnId).Query()
	var count int
	err := q.db.QueryRowContext(ctx, query, args...).Scan(&count)
	if err != nil {
		return false, err
	}

	return count > 0, nil
}

func (q *RoleQuery) WithUser() *RoleQuery {
	// 添加Display字段
	q.AppendSelect(edgeUserTable.C(EdgeUserDisplayNikeName))
	// 添加关系（左连接）
	q.LeftJoin(edgeUserTable).
		On(
			q.C( EdgeUserLinkField),
			edgeUserTable.C(EdgeUserRefField),
		)
	return q
}

