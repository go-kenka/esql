// Code generated by esql, DO NOT EDIT.
package user

import (
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

const (
	TableName    = "user"
	ColumnId = "id"
	ColumnUsername = "username"
	ColumnNikeName = "nike_name"
	ColumnRoleId = "role_id"// EdgeRoleTableName 用户与角色关系
    EdgeRoleTableName   = "role"
    EdgeRoleLinkField   = "role_id"
    EdgeRoleRefField    = "id"
    EdgeRoleDisplayRoleName = "role_name"
)

var (
	userTable        = esql.Table(TableName).As("t1")
    edgeRoleTable      = esql.Table(EdgeRoleTableName).As("t2")
)

var Columns = []string{
	ColumnId,
	ColumnUsername,
	ColumnNikeName,
	ColumnRoleId,
}

type UserClient struct {
	direct string
	db     *sqlx.DB
}

type UserData struct {
    *UserEdgeRoleData
    Id int `db:"id"` // ID
    Username string `db:"username"` // 用户账号
    NikeName string `db:"nike_name"` // 用户名称
    RoleId int `db:"role_id"` // 角色ID
}

func (d *UserData) HasRole() bool {
	return d.UserEdgeRoleData != nil
}

type UserEdgeRoleData struct {
	RoleName string `db:"role_name"` // 
}



func NewUserClient(db *sqlx.DB) *UserClient {
	return &UserClient{
		direct: db.DriverName(),
		db:     db,
	}
}

func (c *UserClient) Query() *UserQuery {
	var cols []string
	for _, column := range Columns {
		cols = append(cols, userTable.C(column))
	}
	return &UserQuery{
		Selector: esql.NewBuilder(c.direct).Select(cols...).From(userTable),
		db:       c.db,
	}
}

func (c *UserClient) Create() *UserCreate {
	return &UserCreate{
		builder: esql.NewBuilder(c.direct).Insert(TableName),
		db:      c.db,
		data:    &UserData{},
	}
}

func (c *UserClient) CreateBulk(data ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{
		db:   c.db,
		data: data,
	}
}

func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{
		builder: esql.NewBuilder(c.direct).Update(TableName),
		db:      c.db,
		data:    &UserData{},
	}
}

func (c *UserClient) UpdateOne(id int) *UserUpdateOne {
	return &UserUpdateOne{
		builder: esql.NewBuilder(c.direct).Update(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
		data:    &UserData{},
	}
}

func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{
		builder: esql.NewBuilder(c.direct).Delete(TableName),
		db:      c.db,
	}
}

func (c *UserClient) DeleteOne(id int) *UserDeleteOne {
	return &UserDeleteOne{
		builder: esql.NewBuilder(c.direct).Delete(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
	}
}
