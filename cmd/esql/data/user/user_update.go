// Code generated by esql, DO NOT EDIT.
package user

import (
	"context"
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

type UserUpdate struct {
	builder *esql.UpdateBuilder
	db      *sqlx.DB
	data    *UserData
}

func (u *UserUpdate) Set(column string, v any) *UserUpdate {
	u.builder.Set(column, v)
	return u
}
func (u *UserUpdate) SetNull(column string) *UserUpdate {
	u.builder.SetNull(column)
	return u
}
func (u *UserUpdate) Add(column string, v any) *UserUpdate {
	u.builder.Add(column, v)
	return u
}

func (u *UserUpdate) Where(p *esql.Predicate) *UserUpdate {
	u.builder.Where(p)
	return u
}

func (u *UserUpdate) Save(ctx context.Context) ([]*UserData, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *UserUpdate) sqlSave(ctx context.Context) ([]*UserData, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data []*UserData

	err = stmt.SelectContext(ctx, data, args...)
	if err != nil {
		return nil, err
	}
	return data, nil
}

type UserUpdateOne struct {
	builder *esql.UpdateBuilder
	db      *sqlx.DB
	data    *UserData
}

func (u *UserUpdateOne) Set(column string, v any) *UserUpdateOne {
	u.builder.Set(column, v)
	return u
}
func (u *UserUpdateOne) SetNull(column string) *UserUpdateOne {
	u.builder.SetNull(column)
	return u
}
func (u *UserUpdateOne) Add(column string, v any) *UserUpdateOne {
	u.builder.Add(column, v)
	return u
}

func (u *UserUpdateOne) Save(ctx context.Context) (*UserData, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *UserUpdateOne) sqlSave(ctx context.Context) (*UserData, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data UserData

	err = stmt.SelectContext(ctx, &data, args...)
	if err != nil {
		return nil, err
	}
	return &data, nil
}
