// Code generated by esql, DO NOT EDIT.
package {{.Name}}

import (
	"context"
	"entgo.io/ent/dialect/sql"
	"github.com/go-kenka/esql"
)

type {{.Name | camelCase}}Update struct {
	builder *sql.UpdateBuilder
	db      esql.Driver
	data    *{{.Name | camelCase}}Data
}

func (u *{{.Name | camelCase}}Update) Set(column string, v any) *{{.Name | camelCase}}Update {
	u.builder.Set(column, v)
	return u
}
func (u *{{.Name | camelCase}}Update) SetNull(column string) *{{.Name | camelCase}}Update {
	u.builder.SetNull(column)
	return u
}
func (u *{{.Name | camelCase}}Update) Add(column string, v any) *{{.Name | camelCase}}Update {
	u.builder.Add(column, v)
	return u
}

func (u *{{.Name | camelCase}}Update) Where(p *sql.Predicate) *{{.Name | camelCase}}Update {
	u.builder.Where(p)
	return u
}

func (u *{{.Name | camelCase}}Update) Save(ctx context.Context) ([]*{{.Name | camelCase}}Data, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *{{.Name | camelCase}}Update) sqlSave(ctx context.Context) ([]*{{.Name | camelCase}}Data, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data []*{{.Name | camelCase}}Data

	err = stmt.SelectContext(ctx, data, args...)
	if err != nil {
		return nil, err
	}
	return data, nil
}

type {{.Name | camelCase}}UpdateOne struct {
	builder *sql.UpdateBuilder
	db      esql.Driver
	data    *{{.Name | camelCase}}Data
}

func (u *{{.Name | camelCase}}UpdateOne) Set(column string, v any) *{{.Name | camelCase}}UpdateOne {
	u.builder.Set(column, v)
	return u
}
func (u *{{.Name | camelCase}}UpdateOne) SetNull(column string) *{{.Name | camelCase}}UpdateOne {
	u.builder.SetNull(column)
	return u
}
func (u *{{.Name | camelCase}}UpdateOne) Add(column string, v any) *{{.Name | camelCase}}UpdateOne {
	u.builder.Add(column, v)
	return u
}

func (u *{{.Name | camelCase}}UpdateOne) Save(ctx context.Context) (*{{.Name | camelCase}}Data, error) {
	u.builder.Returning(Columns...)
	return u.sqlSave(ctx)
}

func (u *{{.Name | camelCase}}UpdateOne) sqlSave(ctx context.Context) (*{{.Name | camelCase}}Data, error) {
	query, args := u.builder.Query()
	stmt, err := u.db.Preparex(query)
	if err != nil {

		return nil, err
	}
	var data {{.Name | camelCase}}Data

	err = stmt.SelectContext(ctx, &data, args...)
	if err != nil {
		return nil, err
	}
	return &data, nil
}
