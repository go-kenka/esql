// Code generated by esql, DO NOT EDIT.
package {{.Name}}

import (
"entgo.io/ent/dialect/sql"
"github.com/go-kenka/esql"
{{- if hasTime . }}
    "time"
{{- end}}
{{- if hasJson . }}
    "encoding/json"
{{- end}}
)

const (
TableName    = "{{.Name}}"
{{- range .Fields}}
    Column{{.Name | camelCase }} = "{{.Name}}"
{{- end -}}
{{- range $i,$e := .Edges}}
    // Edge{{$e.From | camelCase }}TableName {{$e.Desc}}
    Edge{{$e.From | camelCase }}TableName   = "{{$e.From}}"
    Edge{{$e.From | camelCase }}LinkField   = "{{$e.Link}}"
    Edge{{$e.From | camelCase }}RefField    = "{{$e.Ref}}"
    {{- range $j,$d := $e.Display}}
        Edge{{$e.From | camelCase }}Display{{$d.Name | camelCase }} = "{{$d.Name}}"
    {{- end -}}
    {{- range $j,$e1 := $e.Relation }}
        // {{$e.From | camelCase}}Edge{{$e1.From | camelCase }}TableName {{$e1.Desc}}
        {{$e.From | camelCase}}Edge{{$e1.From | camelCase }}TableName   = "{{$e1.From}}"
        {{$e.From | camelCase}}Edge{{$e1.From | camelCase }}LinkField   = "{{$e1.Link}}"
        {{$e.From | camelCase}}Edge{{$e1.From | camelCase }}RefField    = "{{$e1.Ref}}"
        {{- range $j,$d := $e1.Display}}
            {{$e.From | camelCase}}Edge{{$e1.From | camelCase }}Display{{$d.Name | camelCase }} = "{{$d.Name}}"
        {{- end -}}
    {{end}}
{{- end}}
)

var (
{{.Name | camelCase | lower}}Table        = sql.Table(TableName).As("t1")
{{- range $i,$e := .Edges}}
    edge{{$e.From | camelCase }}Table      = sql.Table(Edge{{$e.From | camelCase }}TableName).As("t{{add $i 2}}")
    {{- range $j,$e1 := $e.Relation }}
        {{$e.From | camelCase | lower}}Edge{{$e1.From | camelCase }}Table  = sql.Table({{$e.From | camelCase}}Edge{{$e1.From | camelCase }}TableName)
    {{- end -}}
{{- end}}
)

var Columns = []string{
{{- range .Fields}}
    Column{{.Name | camelCase }},
{{- end}}
}

type {{.Name | camelCase}}Client struct {
direct string
db     esql.Driver
}

type {{.Name | camelCase}}Data struct {
{{- range $i,$e := .Edges}}
    {{- if or (eq $e.Type 1) (eq $e.Type 3)}}
        {{$e.From | camelCase}}List []*{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data
    {{- else -}}
        *{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data
    {{- end}}
{{- end}}
{{range $i,$f := .Fields}}
    {{$f.Name | camelCase }} {{$f.TypeInfo | goType}} `db:"{{$f.Name}}"` // {{$f.Comment}}
{{- end}}
}

{{range $i,$e := .Edges}}
    func (d *{{$.Name | camelCase}}Data) Has{{$e.From | camelCase}}() bool {
    {{- if or (eq $e.Type 1) (eq $e.Type 3)}}
        return d.{{$e.From | camelCase}}List != nil
    {{- else -}}
        return d.{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data != nil
    {{- end}}
    }
{{end}}

{{range $i,$e := .Edges}}
    type {{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data struct {
    {{- range $j,$e1 := $e.Relation }}
        *{{$e.From | camelCase}}Edge{{$e1.From | camelCase}}Data
    {{- end}}
    {{$e.Ref | camelCase }} int `db:"{{$e.Ref}}"` // {{$e.Ref}}
    {{- range $k,$d := $e.Display}}
        {{$d.Name | camelCase }} {{$d.TypeInfo | goType}} `db:"{{$d.Name}}"` // {{$d.Comment}}
    {{- end}}
    }
{{- end}}

{{range $i,$e := .Edges}}
    {{- range $j,$e1 := $e.Relation }}
        func (d *{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data) Has{{$e1.From | camelCase}}() bool {
        return d.{{$e.From | camelCase}}Edge{{$e1.From | camelCase}}Data != nil
        }

        type {{$e.From | camelCase}}Edge{{$e1.From | camelCase}}Data struct {
        {{- range $k,$d := $e1.Display -}}
            {{$d.Name | camelCase }} {{$d.TypeInfo | goType}} `db:"{{$d.Name}}"` // {{$d.Comment}}
        {{- end}}
        }
    {{- end -}}
{{- end}}

func New{{.Name | camelCase}}Client(db esql.Driver) *{{.Name | camelCase}}Client {
return &{{.Name | camelCase}}Client{
direct: db.DriverName(),
db:     db,
}
}

func (c *{{.Name | camelCase}}Client) Query() *{{.Name | camelCase}}Query {
var cols []string
for _, column := range Columns {
cols = append(cols, {{.Name | camelCase | lower}}Table.C(column))
}
return &{{.Name | camelCase}}Query{
Selector: sql.Dialect(c.direct).Select(cols...).From({{.Name | camelCase | lower}}Table),
db:       c.db,
with: map[string]struct{}{},
}
}

func (c *{{.Name | camelCase}}Client) Create() *{{.Name | camelCase}}Create {
return &{{.Name | camelCase}}Create{
builder: sql.Dialect(c.direct).Insert(TableName),
db:      c.db,
data:    &{{.Name | camelCase}}Data{},
}
}

func (c *{{.Name | camelCase}}Client) CreateBulk(data ...*{{.Name | camelCase}}Create) *{{.Name | camelCase}}CreateBulk {
return &{{.Name | camelCase}}CreateBulk{
db:   c.db,
data: data,
}
}

func (c *{{.Name | camelCase}}Client) Update() *{{.Name | camelCase}}Update {
return &{{.Name | camelCase}}Update{
builder: sql.Dialect(c.direct).Update(TableName),
db:      c.db,
data:    &{{.Name | camelCase}}Data{},
}
}

func (c *{{.Name | camelCase}}Client) UpdateOne(id int) *{{.Name | camelCase}}UpdateOne {
return &{{.Name | camelCase}}UpdateOne{
builder: sql.Dialect(c.direct).Update(TableName).Where(sql.EQ(ColumnId, id)),
db:      c.db,
data:    &{{.Name | camelCase}}Data{},
}
}

func (c *{{.Name | camelCase}}Client) Delete() *{{.Name | camelCase}}Delete {
return &{{.Name | camelCase}}Delete{
builder: sql.Dialect(c.direct).Delete(TableName),
db:      c.db,
}
}

func (c *{{.Name | camelCase}}Client) DeleteOne(id int) *{{.Name | camelCase}}DeleteOne {
return &{{.Name | camelCase}}DeleteOne{
builder: sql.Dialect(c.direct).Delete(TableName).Where(sql.EQ(ColumnId, id)),
db:      c.db,
}
}
