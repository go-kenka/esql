// Code generated by esql, DO NOT EDIT.
package {{.Name}}

import (
	"github.com/go-kenka/esql"
	"github.com/jmoiron/sqlx"
)

const (
	TableName    = "{{.Name}}"
	{{- range .Fields}}
	Column{{.Name | camelCase }} = "{{.Name}}"
	{{- end -}}
    {{- range $i,$e := .Edges}}
    {{- if eq $e.To "" -}}
    // Edge{{$e.From | camelCase }}TableName {{$e.Desc}}
    Edge{{$e.From | camelCase }}TableName   = "{{$e.From}}"
    Edge{{$e.From | camelCase }}LinkField   = "{{$e.Link}}"
    Edge{{$e.From | camelCase }}RefField    = "{{$e.Ref}}"
    {{- range $j,$d := $e.Display}}
    Edge{{$e.From | camelCase }}Display{{$d.Name | camelCase }} = "{{$d.Name}}"
    {{- end -}}
    {{- else -}}
    // {{$e.To | camelCase}}Edge{{$e.From | camelCase }}TableName {{$e.Desc}}
    {{$e.To | camelCase}}Edge{{$e.From | camelCase }}TableName   = "{{$e.From}}"
    {{$e.To | camelCase}}Edge{{$e.From | camelCase }}LinkField   = "{{$e.Link}}"
    {{$e.To | camelCase}}Edge{{$e.From | camelCase }}RefField    = "{{$e.Ref}}"
	{{- range $j,$d := $e.Display}}
    {{$e.To | camelCase}}Edge{{$e.From | camelCase }}Display{{$d.Name | camelCase }} = "{{$d.Name}}"
    {{- end -}}
    {{- end -}}
    {{- end}}
)

var (
	{{.Name | camelCase | lower}}Table        = esql.Table(TableName).As("t1")
	{{- range $i,$e := .Edges}}
    {{- if eq $e.To ""}}
    edge{{$e.From | camelCase }}Table      = esql.Table(Edge{{$e.From | camelCase }}TableName).As("t{{add $i 2}}")
    {{- else }}
    {{$e.To | camelCase | lower}}Edge{{$e.From | camelCase }}Table  = esql.Table({{$e.To | camelCase}}Edge{{$e.From | camelCase }}TableName)
    {{- end -}}
    {{- end}}
)

var Columns = []string{
    {{- range .Fields}}
	Column{{.Name | camelCase }},
	{{- end}}
}

type {{.Name | camelCase}}Client struct {
	direct string
	db     *sqlx.DB
}

type {{.Name | camelCase}}Data struct {
    {{- range $i,$e := .Edges}}
    {{- if eq $e.To "" }}
	{{- if or (eq $e.Type 1) (eq $e.Type 3)}}
	{{$e.From | camelCase}}List []*{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data
	{{else}}
	*{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data
    {{- end -}}
    {{- end -}}
    {{- end -}}
    {{range $i,$f := .Fields}}
    {{$f.Name | camelCase }} {{$f.TypeInfo | goType}} `db:"{{$f.Name}}"` // {{$f.Comment}}
    {{- end}}
}

{{range $i,$e := .Edges}}
{{- if eq $e.To "" -}}
func (d *{{$.Name | camelCase}}Data) Has{{$e.From | camelCase}}() bool {
	{{- if or (eq $e.Type 1) (eq $e.Type 3)}}
	return d.{{$e.From | camelCase}}List != nil
	{{else}}
	return d.{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data != nil
	{{- end -}}
}
{{- end -}}
{{- end -}}

{{range $i,$e := .Edges}}
{{ if eq $e.To "" }}
type {{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data struct {
    {{- range $j,$e1 := $.Edges}}
    {{- if eq $e1.To $e.From -}}
    *{{$e1.To | camelCase}}Edge{{$e1.From | camelCase}}Data
	{{else}}
	{{$e.Ref | camelCase }} int `db:"{{$e.Ref}}"` // {{$e.Ref}}
    {{- end -}}
    {{- end -}}
	{{- range $k,$d := $e.Display}}
	{{$d.Name | camelCase }} {{$d.TypeInfo | goType}} `db:"{{$d.Name}}"` // {{$d.Comment}}
	{{- end}}
}
{{- end -}}
{{- end}}

{{range $i,$e := .Edges}}
{{- if eq $e.To "" -}}
{{- range $j,$e1 := $.Edges -}}
{{- if eq $e1.To $e.From -}}
func (d *{{$.Name | camelCase}}Edge{{$e.From | camelCase}}Data) Has{{$e1.From | camelCase}}() bool {
   return d.{{$e.From | camelCase}}Edge{{$e1.From | camelCase}}Data != nil
}

type {{$e.From | camelCase}}Edge{{$e1.From | camelCase}}Data struct {
	{{- range $k,$d := $e1.Display -}}
	{{$d.Name | camelCase }} {{$d.TypeInfo | goType}} `db:"{{$d.Name}}"` // {{$d.Comment}}
	{{- end}}
}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end}}

func New{{.Name | camelCase}}Client(db *sqlx.DB) *{{.Name | camelCase}}Client {
	return &{{.Name | camelCase}}Client{
		direct: db.DriverName(),
		db:     db,
	}
}

func (c *{{.Name | camelCase}}Client) Query() *{{.Name | camelCase}}Query {
	var cols []string
	for _, column := range Columns {
		cols = append(cols, {{.Name | camelCase | lower}}Table.C(column))
	}
	return &{{.Name | camelCase}}Query{
		Selector: esql.NewBuilder(c.direct).Select(cols...).From({{.Name | camelCase | lower}}Table),
		db:       c.db,
		with: map[string]struct{}{},
	}
}

func (c *{{.Name | camelCase}}Client) Create() *{{.Name | camelCase}}Create {
	return &{{.Name | camelCase}}Create{
		builder: esql.NewBuilder(c.direct).Insert(TableName),
		db:      c.db,
		data:    &{{.Name | camelCase}}Data{},
	}
}

func (c *{{.Name | camelCase}}Client) CreateBulk(data ...*{{.Name | camelCase}}Create) *{{.Name | camelCase}}CreateBulk {
	return &{{.Name | camelCase}}CreateBulk{
		db:   c.db,
		data: data,
	}
}

func (c *{{.Name | camelCase}}Client) Update() *{{.Name | camelCase}}Update {
	return &{{.Name | camelCase}}Update{
		builder: esql.NewBuilder(c.direct).Update(TableName),
		db:      c.db,
		data:    &{{.Name | camelCase}}Data{},
	}
}

func (c *{{.Name | camelCase}}Client) UpdateOne(id int) *{{.Name | camelCase}}UpdateOne {
	return &{{.Name | camelCase}}UpdateOne{
		builder: esql.NewBuilder(c.direct).Update(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
		data:    &{{.Name | camelCase}}Data{},
	}
}

func (c *{{.Name | camelCase}}Client) Delete() *{{.Name | camelCase}}Delete {
	return &{{.Name | camelCase}}Delete{
		builder: esql.NewBuilder(c.direct).Delete(TableName),
		db:      c.db,
	}
}

func (c *{{.Name | camelCase}}Client) DeleteOne(id int) *{{.Name | camelCase}}DeleteOne {
	return &{{.Name | camelCase}}DeleteOne{
		builder: esql.NewBuilder(c.direct).Delete(TableName).Where(esql.EQ(ColumnId, id)),
		db:      c.db,
	}
}
